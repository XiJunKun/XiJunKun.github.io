<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/12/hello-world/"/>
      <url>/2018/12/12/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>requests</title>
      <link href="/2018/12/12/requests/"/>
      <url>/2018/12/12/requests/</url>
      
        <content type="html"><![CDATA[<h1 id="requests笔记："><a href="#requests笔记：" class="headerlink" title="requests笔记："></a>requests笔记：</h1><h2 id="发送get请求："><a href="#发送get请求：" class="headerlink" title="发送get请求："></a>发送get请求：</h2><p>发送get请求，直接调用<code>requests.get</code>就可以了。想要发送什么类型的请求，就调用什么方法。<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># params 接受一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span><br><span class="hljs-comment"># response = requests.get("https://www.baidu.com/")</span><br><br><span class="hljs-comment"># print(type(response.text))</span><br><br><span class="hljs-comment"># 查看响应内容 response.text返回的是Unicode格式的参数</span><br><span class="hljs-comment"># print(response.text)</span><br><br><span class="hljs-comment"># 查看响应内容 response.content返回的字节流数据</span><br><span class="hljs-comment"># print(type(response.content))</span><br><br><span class="hljs-comment"># print(response.content.decode('utf-8'))</span><br><br><span class="hljs-comment"># 查看完整url地址</span><br><span class="hljs-comment"># print(response.url)</span><br><br><span class="hljs-comment"># 查看响应头部字符编码</span><br><span class="hljs-comment"># print(response.encoding)</span><br><br><span class="hljs-comment"># 查看响应码</span><br><span class="hljs-comment"># print(response.status_code)</span><br><br>params = &#123;<br>    <span class="hljs-string">'wd'</span>:<span class="hljs-string">'中国'</span><br>&#125;<br>headers = &#123;<br>    <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'</span><br>&#125;<br>response = requests.get(<span class="hljs-string">"https://www.baidu.com/s"</span>,params=params,headers=headers)<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'baidu.html'</span>,<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(response.content.decode(<span class="hljs-string">'utf-8'</span>))<br>    print(response.url)<br></code></pre></td></tr></table></figure></p><h1 id="respones-text和response-content的区别："><a href="#respones-text和response-content的区别：" class="headerlink" title="respones.text和response.content的区别："></a>respones.text和response.content的区别：</h1><ol><li>respones.text: 这个是str的数据类型，是request库将response.content进行解码的字符串。解码需要指定一个编码方式，request会根据自己的猜测来判断编码方式，所以有时候可能会猜测错误，错误就会导致解码产生乱码。这时候就应该使用<code>response.content.decode(&#39;utf-8&#39;)</code>进行手动解码。</li><li>response.cnontent: 这个是直接从网络上面抓取的数据，没有经过任何解码。所以是一个bytes类型。其实在硬盘上和网络上传输的字符串都是bytes类型。<h2 id="response的一些属性："><a href="#response的一些属性：" class="headerlink" title="response的一些属性："></a>response的一些属性：</h2></li></ol><h2 id="发送post请求："><a href="#发送post请求：" class="headerlink" title="发送post请求："></a>发送post请求：</h2><p>发送post请求，直接调用<code>requests.post</code>方法就可以了。<br>如果返回的是json数据，那么可以调用<code>response.json()</code>来将json字符串转换为字典或者列表。</p><h2 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h2><p>在请求方法中，传递<code>proxies</code>参数就可以了。</p><h2 id="处理cookie："><a href="#处理cookie：" class="headerlink" title="处理cookie："></a>处理cookie：</h2><p>如果想要在多次请求中共享cookie，那么应该使用session,示例代码如下：<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">"http://www.renren.com/PLogin.do"</span><br>data = &#123;<br>        <span class="hljs-string">'email'</span>: <span class="hljs-string">"账号"</span>,<br>        <span class="hljs-string">'password'</span>: <span class="hljs-string">"密码"</span><br>    &#125;<br><br>headers = &#123;<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36"</span><br>    &#125;<br><br>session = requests.Session()<br><br>session.post(url,data=data,headers=headers)<br><br>response = session.get(<span class="hljs-string">'http://www.renren.com/880151247/profile'</span>)<br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'renren.html'</span>,<span class="hljs-string">'w'</span>,encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(response.text)<br></code></pre></td></tr></table></figure></p><h2 id="处理没有授权的https协议："><a href="#处理没有授权的https协议：" class="headerlink" title="处理没有授权的https协议："></a>处理没有授权的https协议：</h2><p>对于那些已经被信任的SSL证书的网站，比如<code>https://www.baidu.com/</code>，那么使用<code>requests</code>直接就可以正常的返回响应。示例代码如下：<br><figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">resp = requests.get(<span class="hljs-string">'http://www.12306.cn/mormhweb'</span>,verify=flase)<br>print(resp.content.decode(<span class="hljs-string">'utf-8'</span>))<br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>urllib</title>
      <link href="/2018/12/11/urllib/"/>
      <url>/2018/12/11/urllib/</url>
      
        <content type="html"><![CDATA[<h3 id="ProxyHandler处理器（代理）："><a href="#ProxyHandler处理器（代理）：" class="headerlink" title="ProxyHandler处理器（代理）："></a>ProxyHandler处理器（代理）：</h3><ol><li><p>代理的原理：在请求木的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，代理服务器拿到目的网站的数据后，再转发给我们的代码。</p></li><li><p><a href="http://httpbin.org" target="_blank" rel="noopener">http://httpbin.org</a>：这个网站可以方便的查看http请求的一些参数。</p></li><li><p>在代码中使用代理：</p><ul><li>使用<code>urllib.request.ProxyHandler</code>，传入一个代理，这个代理是一个字典，字典的key依赖于代理服务器能够接收的类型，一般是<code>http</code>或者<code>https</code>,值是<code>ip:port</code>。</li><li>使用上一步创建的<code>handler</code>，以及<code>request.build_opener</code>创建一个<code>opener</code>对象。</li><li>使用上一部创建的<code>opener</code>，调用<code>open</code>函数，发起请求。<br>示例代码如下：<figure class="hljs highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br>url = <span class="hljs-string">'http://httpbin.org/ip'</span><br><span class="hljs-comment"># 1.使用ProxyNandler，传入代理构建一个handler</span><br>handler = urllib.request.ProxyHandler(&#123;<span class="hljs-string">"http"</span>:<span class="hljs-string">"163.125.232.20:8118"</span>&#125;)<br><span class="hljs-comment"># 2.使用上面创建的handler构建一个opener</span><br>opener = urllib.request.build_opener(handler)<br><span class="hljs-comment"># 3.使用opener去发送一个请求</span><br>resp = opener.open(url)<br>print(resp.read())<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="熙军"><a href="#熙军" class="headerlink" title="熙军"></a>熙军</h1><p><strong>Don’t give up and don’t give in!!!</strong></p><p><strong>Emali：<a href="#" title="邮箱">1428470542@qq.com</a></strong></p><p><strong>Homepage：<a href="https://xijunkun.github.io/" title="主页" target="_blank" rel="noopener">熙军’s Homepage</a></strong></p><p><strong>GitHub：<a href="https://github.com/XiJunKun" title="GiHhub" target="_blank" rel="noopener">@XiJunKun</a></strong></p><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><ol><li><p>熙军，我喜欢这个名字。</p></li><li><p>熙军 的来历：<del>只是觉得谐音有意思</del>好吧我承认。</p></li><li><p>S 属性，虽然可能表现的更像 M 但是其实 S 的属性更多呢，<strong>除非你是让我心甘情愿的人</strong>。对 homosexual 没有歧视但是我 只喜欢女孩子，想要认识可爱的小姐姐，想脱单。</p></li><li><p>每个人选择自己喜欢的东西一定有他的理由，所以 请不要强行向我安利你喜欢的东西。</p></li><li><p>Steam 用户，PUBG 是目前为止唯一一个玩了超过 300 小时的游戏<del>但还是一个菜鸡</del>，Dragon Ball: Xenoverse 2 是时长第二的游戏，超过 100 小时，R6 想玩但一直没什么动力，Moba、FPS 玩家。</p></li><li><p>如果你想和我一起玩游戏，我的 Steam ID 是 <strong>熙军</strong>，不定期在线，并且 如果你是那种很吵很暴躁张口就喷队友的人请不要来打扰我。</p></li><li><p>Minecraft（Java版），喜欢建房子。</p></li><li><p>喜欢林俊杰和陈奕迅以及周杰伦这种唱功或者音乐水平确实到位的歌手，云村钉子户。</p></li><li><p>经常懒癌发作什么也不想做，活着的，要长高<del>尽管很难</del>（162 cm / 49 KG），有点宅。喜欢猫，喜欢狗。</p></li><li><p>喜欢写一些乱七八糟的东西，也许这些没有人喜欢看吧，但无论如何 这是我们在面对世界这一庞然大物时能留下的一点声音，无论是惊慌失措还是泰然面对。</p></li><li><p><del>可能会更新更多的技术性文章</del>主要还是收集碰到的问题，取决于我学习的程度，自己对自己不满意的话也不会给别人看。</p></li><li><p>Python 大概是我最喜欢的编程语言，要问为什么喜欢的话，其实是因为它简单。</p></li><li><p>奢侈的梦想是环游世界，与家人一起，我觉得我会很享受那份幸福。</p></li><li><p>比起依赖别人，<strong>我更喜欢被人依赖，如果我喜欢的人能让我默默付出我就很满足了</strong>。和我客套我反而会很伤心。</p></li><li><p><strong>上一条很重要</strong>。</p></li><li><p>讨厌需要鼠标不停点点点的程序，我的手还要留着玩 FPS 游戏呢。</p></li><li><p>有一个所爱的人这件事情和 root 密码一样重要，即使不知道她是否爱我。</p></li><li><p>如果有什么问题，欢迎发邮件 / <a href="mailto:1428470542@qq.com" target="_blank" rel="noopener">1428470542@qq.com</a>，我希望听到别人的声音，希望不要发莫名其妙的邮件。</p></li><li><p>你好，世界。</p></li></ol>]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
